// original from: https://github.com/samueltbrown/gradle-cucumber-plugin
// originally under MIT LICENSE: https://github.com/samueltbrown/gradle-cucumber-plugin/blob/master/LICENSE
// Simplified & Modified by: @jdamick

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.plugins.JavaPlugin

import org.apache.tools.ant.AntClassLoader
import org.gradle.api.DefaultTask
import org.gradle.api.UncheckedIOException
import org.gradle.api.file.FileCollection
import org.gradle.api.tasks.TaskAction

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;


/**
 * Cucumber plugin definition.  This class initializes the plugin, sets up the convention mapping and adds
 * the cucumber task as an available gradle task.
 */

apply plugin: CucumberPlugin
 
class CucumberPlugin  implements Plugin<Project> {
    static final String CLASSPATH = 'classpath'
    static final String CUCUMBER_RUNTIME_CONFIGURATION_NAME = 'cucumberRuntime'

    @Override
    void apply(Project project) {
        project.plugins.apply(JavaPlugin)

        project.configurations.create(CUCUMBER_RUNTIME_CONFIGURATION_NAME).setVisible(false).setTransitive(true)
                .setDescription('The Cucumber libraries to be used for this project.')
                .extendsFrom(project.configurations.getByName('testRuntime'))

        CucumberConvention cucumberConvention = new CucumberConvention(project)
        project.convention.plugins.cucumber = cucumberConvention

        configureCucumberTask(project, cucumberConvention)
    }

    private def configureCucumberTask(final Project project, CucumberConvention cucumberConvention) {
        project.tasks.withType(CucumberTask).whenTaskAdded { CucumberTask cucumberTask ->
            cucumberTask.conventionMapping.map('buildscriptClasspath') { project.buildscript.configurations.getByName(CLASSPATH).asFileTree }
            cucumberTask.conventionMapping.map('cucumberClasspath') { project.configurations.getByName(CUCUMBER_RUNTIME_CONFIGURATION_NAME).asFileTree }
            cucumberTask.conventionMapping.map('environmentVars') { cucumberConvention.environmentVars }
            cucumberTask.conventionMapping.map('gluePackages') { cucumberConvention.gluePackages }
            cucumberTask.conventionMapping.map('featureDirs') { cucumberConvention.featureDirs }
            cucumberTask.conventionMapping.map('tags') { cucumberConvention.tags }
            cucumberTask.conventionMapping.map('formats') { cucumberConvention.formats }
            cucumberTask.conventionMapping.map('strict') { cucumberConvention.strict }
            cucumberTask.conventionMapping.map('monochrome') { cucumberConvention.monochrome }
            cucumberTask.conventionMapping.map('dryRun') { cucumberConvention.dryRun }
            
            project.dependencies.add(CUCUMBER_RUNTIME_CONFIGURATION_NAME, "info.cukes:cucumber-junit:$cucumberConvention.cucumberJvmVersion")
            project.dependencies.add(CUCUMBER_RUNTIME_CONFIGURATION_NAME, "info.cukes:cucumber-java:$cucumberConvention.cucumberJvmVersion")
            project.dependencies.add(CUCUMBER_RUNTIME_CONFIGURATION_NAME, "info.cukes:cucumber-core:$cucumberConvention.cucumberJvmVersion")
            
            project.dependencies.add('testCompile', "info.cukes:cucumber-junit:$cucumberConvention.cucumberJvmVersion")
            project.dependencies.add('testCompile', "info.cukes:cucumber-java:$cucumberConvention.cucumberJvmVersion")
        }

        CucumberTask cucumberTask = project.tasks.add(name: 'cucumber', dependsOn: ['assemble', 'compileTestJava'], type: CucumberTask)
        // CucumberTask cucumberTask = project.tasks.create(name: 'cucumber', dependsOn: ['assemble', 'compileTestJava'], type: CucumberTask)
        cucumberTask.description = "Run cucumber acceptance tests."
        cucumberTask.group = "Verification"
    }
}


// Cucumber Task params
class CucumberConvention {

    Map<String, ?> environmentVars = [:];

    /**
     *  Packages to use for steps
     */
    List<String> gluePackages
	
   /**
    * Directories to look for feature files.
    */
    List<String> featureDirs = ['src/test/resources']

    /**
     * Tags used to filter which scenarios should be run.
     */
    List<String> tags

    /**
     * Output formats for cucumber test results. Defaults to 'pretty'
     */
    List<String> formats

    /**
     * Execute a test dry run without actually executing tests. Defaults to false
     */
    boolean dryRun = false

    /**
     * Strict mode, fail if there are pending or skipped tests. Defaults to false
     */
    boolean strict = false

    /**
     * Format output in single color.  Defaults to false
     */
    boolean monochrome = false

    /**
     * Version of cucumber-jvm to use to execute cucumber tests
     */
    String cucumberJvmVersion = '1.1.5'
    //don't use '1.1.3' - http://stackoverflow.com/questions/15552861/cucumber-jvm-java-helloworld-example-outofboundsexception-error
    //also, don't use version '1.1.2', because this causes '@Before' annotation to throw NullPointerException
    
    private Project project

    CucumberConvention(Project project) {
        this.project = project
        this.formats = ['pretty', 
          "junit:${project.reporting.baseDir.absolutePath}/cucumber/cucumber-junit-report.xml",
          "html:${project.reporting.baseDir.absolutePath}/cucumber/cucumber-html-report",
          "json:${project.reporting.baseDir.absolutePath}/cucumber/cucumber-json-report.json"]
    }

    def cucumber(Closure closure) {
        closure.setDelegate this
        closure.call()
    }

}



// Defines the cucumber task that can be used in a gradle build file. 
class CucumberTask extends DefaultTask  {
    static final Logger LOGGER = LoggerFactory.getLogger(CucumberTask.class)

    List<String> gluePackages
    List<String> featureDirs
    List<String> tags
    List<String> formats
    boolean strict
    boolean monochrome
    boolean dryRun
    FileCollection buildscriptClasspath
    FileCollection cucumberClasspath
    Map<String, ?> environmentVars;

    def cliArgs
    def cliClasspath
    def featuresExist = false

    public CucumberTask() {
      super()
      doLast { 
        if (featuresExist) {
          getProject().javaexec {
            args = cliArgs
            main = 'cucumber.api.cli.Main'
            classpath cliClasspath
			systemProperties environmentVars
          }
        } else {
          LOGGER.info("Cucumber Feature Dirs Missing: " + getFeatureDirs());
        }
      }
    }

    @TaskAction
    def cucumber() {
        LOGGER.info "Configuring Cucumber for ${getProject()}"
        executeCucumberRunner()
    }

    private void executeCucumberRunner(){
        List<String> args = new ArrayList<String>();

        if (getFormats() != null) {
            for(String format : getFormats()){
                args.add("--format");
                args.add(format);
            }
        }

        if (getGluePackages() != null) {
            for(String dir : getGluePackages()){
                args.add("--glue");
                args.add(dir);
            }
        }

        if (getTags() != null) {
            args.add("--tags");
            for(String tag : getTags()){
                args.add(tag);
            }
        }

        if (getStrict()){
            args.add("--strict");
        }

        if (getMonochrome()){
            args.add("--monochrome");
        }

        if (getDryRun()){
            args.add("--dry-run");
        }

        if (getFeatureDirs() != null) {
          for(String dir : getFeatureDirs()) {
            args.add(dir);
            def featureFiles = getProject().fileTree(dir) {
              include '**/*.feature'
            }
            featuresExist = featuresExist || !featureFiles.isEmpty()
          }
        }
        environmentVars = getEnvironmentVars()
        cliArgs = args
        cliClasspath = getProject().configurations.cucumberRuntime + 
          getProject().sourceSets.main.output + getProject().sourceSets.test.output
           
        LOGGER.info("Cucumber args: $cliArgs");
        if (LOGGER.isDebugEnabled()) {
          LOGGER.debug("Cucumber classpath: $cliClasspath.asPath")
          LOGGER.debug("Cucumber environment vars: $environmentVars")
        }
    }    
}


