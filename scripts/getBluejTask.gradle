task getBlueJ {
    description = 'Downloads the specified (-PbluejVer=<ver> or latest) version of BlueJ into the local BlueJ directory.'
    group = 'BlueJ'
    outputs.upToDateWhen { selectedBluejDir.exists() } // Use upToDateWhen to avoid downloading shipped dist initially

    doFirst {
        logger.quiet "Downloading BlueJ version: $selectedBluejVer"

        def installerJar = downloadBluejInstaller selectedBluejVer, temporaryDir
        def distJar = extractBluejDistFromInstaller installerJar, temporaryDir

        file(selectedBluejDir).deleteDir()
        extractBluejDistIntoDir distJar, selectedBluejDir

        makeBluejTestFriendly selectedBluejDir
    }
}

File downloadBluejInstaller(String ver, File targetDir) {
    def verNoDots = ver.replace '.', '' // E.g: 3.1.1 --> 311
    def filename = "bluej-${verNoDots}.jar"
    def bluejUrl = "http://bluej.org/download/files/$filename"

    download {
        src bluejUrl
        dest targetDir
    }

    def downloadedFile = file "$targetDir/$filename"
    return downloadedFile
}

File extractBluejDistFromInstaller(File installerJar, File targetDir) {
    def distName = 'bluej-dist.jar'
    copy {
        from zipTree(installerJar)
        into targetDir
        include distName
    }

    def extractedJar = file "$targetDir/$distName"
    return extractedJar
}

void extractBluejDistIntoDir(File distJar, File targetDir) {
    copy {
        from zipTree(distJar)
        into targetDir
    }
}

void makeBluejTestFriendly(File dir) {
    def bluejDefs = file "$dir/lib/bluej.defs"

    setPropertyFile(bluejDefs) {
        entry key: 'bluej.autoOpenLastProject', value: 'false' // Don't auto-open projects
        entry key: 'bluej.debug', value: 'true'                // Don't redirect output to file. It messes with Cucumber output
        entry key: 'blackbox.uuid', value: 'optout'            // Don't show dialog about blackbox participation when starting
    }

    // Delete any bundled extensions (they just interfere..)
    file("$dir/lib/extensions").listFiles().each { it.delete() }
}

